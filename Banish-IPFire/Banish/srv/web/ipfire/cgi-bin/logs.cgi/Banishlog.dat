#!/usr/bin/perl
#
# Banishlog.dat 1.4.7
#
# SID Solutions
# Solid Innovative Designed Solutions
# http://sidsolutions.net
# Copyright (c) 2005/07/10 Sid McLaurin
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# $Id: Banishlog.dat,v 1.4.7 2008/03/17 21:34 Sid McLaurin
#
# Ported to IPFire by Rob Brewer [ granturav8@gmail.com ] - 28/12/18 

use strict;

# enable only the following on debugging purpose
#use warnings;
#use CGI::Carp 'fatalsToBrowser';

require '/var/ipfire/general-functions.pl';
require "${General::swroot}/lang.pl";
require "${General::swroot}/header.pl";

use POSIX();

#workaround to suppress a warning when a variable is used only once
my @dummy = ( ${Header::table1colour}, ${Header::table2colour} );
undef (@dummy);

my %cgiparams=();
my %logsettings=();
my $errormessage = '';

my @shortmonths = ( 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug',
	'Sep', 'Oct', 'Nov', 'Dec' );
my @longmonths = ( $Lang::tr{'january'}, $Lang::tr{'february'}, $Lang::tr{'march'},
	$Lang::tr{'april'}, $Lang::tr{'may'}, $Lang::tr{'june'}, $Lang::tr{'july'}, $Lang::tr{'august'},
	$Lang::tr{'september'}, $Lang::tr{'october'}, $Lang::tr{'november'},
	$Lang::tr{'december'} );

my @now = localtime();
my $dow = $now[6];
my $doy = $now[7];
my $tdoy = $now[7];
my $year = $now[5]+1900;

$cgiparams{'DAY'} = $now[3];
$cgiparams{'MONTH'} = $now[4];
$cgiparams{'ACTION'} = '';

&Header::getcgihash(\%cgiparams);
$logsettings{'LOGVIEW_REVERSE'} = 'off';
&General::readhash("${General::swroot}/logging/settings", \%logsettings);
${Header::viewsize} = defined ($logsettings{'LOGVIEW_VIEWSIZE'}) ? $logsettings{'LOGVIEW_VIEWSIZE'} : 150;

my $start = ($logsettings{'LOGVIEW_REVERSE'} eq 'on') ? 0x7FFFF000 : 0; #index of firts line number to display

if ($ENV{'QUERY_STRING'} && $cgiparams{'ACTION'} ne $Lang::tr{'update'})
{
	my @temp = split(',',$ENV{'QUERY_STRING'});
	$start = $temp[0];
	$cgiparams{'MONTH'} = $temp[1];
	$cgiparams{'DAY'} = $temp[2];
}

if (!($cgiparams{'MONTH'} =~ /^(0|1|2|3|4|5|6|7|8|9|10|11)$/) ||
	!($cgiparams{'DAY'} =~ /^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)$/))
{
	$cgiparams{'DAY'} = $now[3];
	$cgiparams{'MONTH'} = $now[4];
}
elsif($cgiparams{'ACTION'} eq '>>')
{
        my @temp_then=();
        my @temp_now = localtime(time);
        $temp_now[4] = $cgiparams{'MONTH'};
        $temp_now[3] = $cgiparams{'DAY'};
	if ($cgiparams{'DAY'}) {
            @temp_then = localtime(POSIX::mktime(@temp_now) + 86400);
	    ## Retrieve the same time on the next day +
	    ## 86400 seconds in a day
	} else {
	    $temp_now[3] = 1;
	    $temp_now[4] = ($temp_now[4]+1) %12;
	    @temp_then = localtime(POSIX::mktime(@temp_now) );
	    $temp_then[3] = 0;
	}
        $cgiparams{'MONTH'} = $temp_then[4];
        $cgiparams{'DAY'} = $temp_then[3];
}
elsif($cgiparams{'ACTION'} eq '<<')
{
        my @temp_then=();
        my @temp_now = localtime(time);
        $temp_now[4] = $cgiparams{'MONTH'};
        $temp_now[3] = $cgiparams{'DAY'};
	if ($cgiparams{'DAY'}) {
            @temp_then = localtime(POSIX::mktime(@temp_now) - 86400);
	    ## Retrieve the same time on the next day -
	    ## 86400 seconds in a day
	} else {
	    $temp_now[3] = 1;
	    $temp_now[4] = ($temp_now[4]-1) %12;
	    @temp_then = localtime(POSIX::mktime(@temp_now) );
	    $temp_then[3] = 0;
	}
        $cgiparams{'MONTH'} = $temp_then[4];
        $cgiparams{'DAY'} = $temp_then[3];
}

# Find in which file.gz is the log. Can be calculated because WEEKLY ROTATING of access.log
my $gzindex;
my $date = $cgiparams{'DAY'} == 0 ? '' :  $cgiparams{'DAY'} <= 9 ? "0$cgiparams{'DAY'}" : "$cgiparams{'DAY'}";

{
    my $xday;
    
    # Calculate time. If future date, calculate for past year !!!
    if (( $cgiparams{'MONTH'} eq $now[4]) && ($cgiparams{'DAY'} > $now[3]) ||
        ( $cgiparams{'MONTH'}  > $now[4] ) ) {
        $xday = POSIX::mktime( 0, 0, 0, $cgiparams{'DAY'}, $cgiparams{'MONTH'}, $year - 1901 );
        $date = "$longmonths[$cgiparams{'MONTH'}] $date, ". int($year-1);
    } else {
        $xday = POSIX::mktime( 0, 0, 0, $cgiparams{'DAY'}, $cgiparams{'MONTH'}, $year - 1900 );
        $date = "$longmonths[$cgiparams{'MONTH'}] $date, $year";
    }

    # calculate end of active week (saturday 23H59)
    my @then = ();
    @then = localtime(time());
    my $sunday = POSIX::mktime( 0, 0, 0, $then[3], $then[4], $then[5]);
    $sunday += (6-$then[6]) * 86400;

    # Convert delta in second to full weeks
	$gzindex = int (($sunday-$xday)/604800 );
}
											   
my $monthstr = $shortmonths[$cgiparams{'MONTH'}];
my $daystr =  $cgiparams{'DAY'} == 0 ?  '..' : $cgiparams{'DAY'} <= 9 ? " $cgiparams{'DAY'}" : "$cgiparams{'DAY'}";
       
my $lines = 0;
my @log=();

my $loop = 1;
my $filestr = 0;
my $lastdatetime;           # for debug
my $search_for_end = 0;
	    
while ($gzindex >=0 && $loop) {
        # calculate file name
        if ($gzindex == 0) {
            $filestr = "/var/log/messages";
        } else {
            $filestr = "/var/log/messages.$gzindex";
    	    $filestr = "$filestr.gz" if -f "$filestr.gz";
        }
	# now read file if existing
	if (open (FILE,($filestr =~ /.gz$/ ? "gzip -dc $filestr |" : $filestr))) {
	    #&General::log("reading $filestr");
	    READ:while (<FILE>) {
		my $line = $_;
#       only log banish entries so banish.* added after kernel:.* in regex below rwb - 14/12/18
	 	if ($line =~ /^${monthstr} ${daystr} ..:..:.. [\w\-]+ kernel:.*banish.*IN=.*$/) {
		    # when standart viewing, just keep in memory the correct slice
		    # it starts a '$start' and size is $viewport
		    # If export, then keep all lines...
		    if ($cgiparams{'ACTION'} eq $Lang::tr{'export'}){
			$log[$lines++] = "$line";
		    } else {
			if ($lines++ < ($start + $Header::viewsize)) {
			    push(@log,"$line");
			    if (@log > $Header::viewsize) {
			        shift (@log);
			    }
			#} else { dont do this optimisation, need to count lines !
			    #    $datetime = $maxtime; # we have read viewsize lines, stop main loop
			    #    last READ;           # exit read file
			}
		    }
		    $search_for_end = 1;	# we find the start of slice, can look for end now
		} else {
		    if ($search_for_end == 1) {
			#finish read files when date is over (test month equality only)
	 		$line =~ /^(...) (..) ..:..:..*$/;
			$loop = 0 if ( ($1 ne $monthstr) || ( ($daystr ne '..') && ($daystr ne $2) ) );
		    }
		}
	    }
	    close (FILE);
	}
	$gzindex--;     # will try next gz file eg 40,39,38,.... because it may have holes when ipcop stopped
	        	# for a long time
}# while

#  $errormessage = "$Lang::tr{'date not in logs'}: $filestr $Lang::tr{'could not be opened'}";

if ($cgiparams{'ACTION'} eq $Lang::tr{'export'})
{
	print "Content-type: text/plain\n\n";
	print "IPCop firewall log\r\n";
	print "$Lang::{'date'}: $date\r\n\r\n";

	if ($logsettings{'LOGVIEW_REVERSE'} eq 'on') { @log = reverse @log; }

	foreach $_ (@log)
	{
		/^... (..) (..:..:..) [\w\-]+ kernel:.*(IN=.*)$/;
		my $day =  $1;
		$day =~ tr / /0/;
		my $time = $cgiparams{'DAY'} ? "$2" : "$day/$2" ;
		print "$time $3\r\n";
		
	}
	exit 0;
}

&Header::showhttpheaders();

&Header::openpage('Banish Log', 1, '');

&Header::openbigbox('100%', 'left', '', $errormessage);

if ($errormessage) {
	&Header::openbox('100%', 'left', $Lang::tr{'error messages'});
	print "<font class='base'>$errormessage&nbsp;</font>\n";
	&Header::closebox();
}

&Header::openbox('100%', 'left', "$Lang::tr{'settings'}:");

print <<END
<form method='post' action='$ENV{'SCRIPT_NAME'}'>
<table width='100%'>
<tr>
	<td width='25%' class='base'>&nbsp;</td>
	<td width='35%' class='base'>$Lang::tr{'month'}:&nbsp;
	<select name='MONTH'>
END
;
for (my $month = 0; $month < 12; $month++)
{
	print "\t<option ";
	if ($month == $cgiparams{'MONTH'}) {
		print "selected='selected' "; }
	print "value='$month'>$longmonths[$month]</option>\n";
}
print <<END
	</select>
	&nbsp;&nbsp;
	&nbsp;$Lang::tr{'day'}:&nbsp;
	<select name='DAY'>
END
;
print "<option value='0'>$Lang::tr{'all'}</option>\n";
for (my $day = 1; $day <= 31; $day++) 
{
	print "\t<option ";
	if ($day == $cgiparams{'DAY'}) {
		print "selected='selected' "; }
	print "value='$day'>$day</option>\n";
}
print <<END
	</select>
	</td>
	<td width='35%'  align='center'>
		<input type='submit' name='ACTION' title='$Lang::tr{'day before'}' value='&lt;&lt;' />&nbsp;
		<input type='submit' name='ACTION' title='$Lang::tr{'day after'}' value='&gt;&gt;' />&nbsp;
		<input type='submit' name='ACTION' value='$Lang::tr{'update'}' />&nbsp;
		<input type='submit' name='ACTION' value='$Lang::tr{'export'}' />
	</td>

</tr>
</table>
</form>
END
;

&Header::closebox();

&Header::openbox('100%', 'left', $Lang::tr{'log'});
print "<p><b>Banish Hits $date: $lines</b></p>";

$start = $lines - ${Header::viewsize} if ($start >= $lines - ${Header::viewsize});
$start = 0 if ($start < 0);

my $prev;
    if ($start == 0) {
	$prev = -1;
    } else {
	$prev = $start - ${Header::viewsize};
	$prev = 0 if ( $prev < 0);
    }
				    
my $next;
    if ($start == $lines - ${Header::viewsize}) {
        $next = -1;
    } else {
        $next = $start + ${Header::viewsize};
        $next = $lines - ${Header::viewsize} if ($next >= $lines - ${Header::viewsize});
    }

if ($logsettings{'LOGVIEW_REVERSE'} eq 'on') { @log = reverse @log; }
if ($lines != 0) { &oldernewer(); }

print <<END
<table width='100%'>
<tr>
	<td width='10%' align='center' class='boldbase'><b>$Lang::tr{'time'}</b></td>
	<td width='13%' align='center' class='boldbase'><b>$Lang::tr{'chain'}</b></td>
	<td width='5%' align='center' class='boldbase'><b>$Lang::tr{'iface'}</b></td>
	<td width='5%' align='center' class='boldbase'><b>$Lang::tr{'proto'}</b></td>
	<td width='16%' align='center' class='boldbase'><b>$Lang::tr{'source'}</b></td>
	<td width='10%' align='center' class='boldbase'><b>$Lang::tr{'src port'}</b></td>
	<td width='5%' align='center' class='boldbase'><b>$Lang::tr{'mac address'}</b></td>
	<td width='16%' align='center' class='boldbase'><b>$Lang::tr{'destination'}</b></td>
	<td width='20%' align='center' class='boldbase'><b>$Lang::tr{'dst port'}</b></td>
</tr>
END
;


$lines = 0;
foreach $_ (@log)
{
	if ($_ =~ /banish\-/){
	/^... (..) (..:..:..) [\w\-]+ kernel:(.*)(IN=.*)$/;
	my $day =  $1;
	$day =~ tr / /0/;
	my $time = $cgiparams{'DAY'} ? "$2" : "$day/$2" ;
	my $comment = $3; 
	my $packet = $4;
	$comment =~ s/banish\-//g;
	$comment = "<img src='/images/Banish/banishFirewalllog.gif' align='absmiddle' alt='*'>$comment";

	$packet =~ /IN=(\w+)/;       my $iface=$1;
	$packet =~ /SRC=([\d\.]+)/;  my $srcaddr=$1;
	$packet =~ /DST=([\d\.]+)/;  my $dstaddr=$1;
	$packet =~ /MAC=([\w+\:]+)/; my $macaddr=$1;
	$packet =~ /PROTO=(\w+)/;    my $proto=$1;
	$packet =~ /SPT=(\d+)/;      my $srcport=$1;
	$packet =~ /DPT=(\d+)/;      my $dstport=$1;
	my $servi = uc(getservbyport($srcport, lc($proto)));
	if ($servi ne '' && $srcport < 1024) {
		$srcport = "$srcport($servi)"; }
	$servi = uc(getservbyport($dstport, lc($proto)));
	if ($servi ne '' && $dstport < 1024) {
		$dstport = "$dstport($servi)";}
	my @mactemp = split(/:/,$macaddr);
	$macaddr = "$mactemp[6]:$mactemp[7]:$mactemp[8]:$mactemp[9]:$mactemp[10]:$mactemp[11]";
	if ($lines % 2) {
		print "<tr bgcolor='${Header::table1colour}'>\n"; }
	else {
		print "<tr bgcolor='${Header::table2colour}'>\n"; }
	print <<END

	<td align='center'>$time</td>
	<td align='center'>$comment</td>
	<td align='center'>$iface</td>
	<td align='center'>$proto</td>
	<td align='center'>
	<table width='100%' cellpadding='0' cellspacing='0'><tr>
	<td align='center'><a href='/cgi-bin/ipinfo.cgi?ip=$srcaddr'>$srcaddr</a></td>
	</tr></table>
	</td>
	<td align='center'>$srcport</td>
	<td align='center'>$macaddr</td>
	<td align='center'>
	<table width='100%' cellpadding='0' cellspacing='0'><tr>
	<td align='center'><a href='/cgi-bin/ipinfo.cgi?ip=$dstaddr'>$dstaddr</a></td>
	</tr></table>
	</td>
	<td align='center'>$dstport</td>
</tr>
END
	;
	$lines++;
	}
}

print "</table>";

&oldernewer();

&Header::closebox();

&Header::closebigbox();

&Header::closepage();

sub oldernewer
{
print <<END
<table width='100%'>
<tr>
END
;

print "<td align='center' width='50%'>";
if ($prev != -1) {
	print "<a href='/cgi-bin/logs.cgi/Banishlog.dat?$prev,$cgiparams{'MONTH'},$cgiparams{'DAY'}'>$Lang::tr{'older'}</a>"; }
else {
	print "$Lang::tr{'older'}"; }
print "</td>\n";

print "<td align='center' width='50%'>";
if ($next >= 0) {
	print "<a href='/cgi-bin/logs.cgi/Banishlog.dat?$next,$cgiparams{'MONTH'},$cgiparams{'DAY'}'>$Lang::tr{'newer'}</a>"; }
else {
	print "$Lang::tr{'newer'}"; }
print "</td>\n";

print <<END
</tr>
</table>
END
;
}
